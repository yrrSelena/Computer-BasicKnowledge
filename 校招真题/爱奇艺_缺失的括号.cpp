/*
题目：
一个完整的括号字符串定义规则如下:
1、空字符串是完整的。
2、如果s是完整的字符串，那么(s)也是完整的。
3、如果s和t是完整的字符串，将它们连接起来形成的st也是完整的。
例如，"(()())", ""和"(())()"是完整的括号字符串，"())(", "()(" 和 ")"是不完整的括号字符串。
牛牛有一个括号字符串s,现在需要在其中任意位置尽量少地添加括号,将其转化为一个完整的括号字符串。请问牛牛至少需要添加多少个括号。
输入描述:
输入包括一行,一个括号序列s,序列长度length(1 ≤ length ≤ 50).
s中每个字符都是左括号或者右括号,即'('或者')'.
输出描述:
输出一个整数,表示最少需要添加的括号数
示例1
输入
复制
(()(()
输出
复制
2

思路：
利用一个栈实现算法，遍历字符串中各个元素，并用res记录需要添加的最小括号数
遇到'('，将其压入栈中
遇到')'，判断栈中元素是否为空，若为空，则res+1，表明需要增加一个'('，否则，弹出栈顶元素。
遍历完所有字符后，判断栈中元素是否为空，若不为空，则弹出栈顶元素，res+1，直至栈中元素为空。
*/

#include<iostream>
#include<stack>
#include<string>
using namespace std;
int main(){
    string s;
    cin>>s;
    int len=s.size();
    int res = 0;
    stack<char> st;
    if(len>0){
        for(int i = 0; i<len; i++){
            if(s[i]=='('){
                st.push(s[i]);
            }
            else if(s[i]==')'){
                if(st.empty()){
                    res++;
                }
                else{
                    st.pop();
                }
            }
        }
        while(!st.empty()){
            res++;
            st.pop();
        }
    }
    cout<<res<<endl;
    return 0;
}
